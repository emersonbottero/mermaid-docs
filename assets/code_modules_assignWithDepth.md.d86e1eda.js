import{_ as e,c as t,o as s,d as a}from"./app.ef92c309.js";const f=JSON.parse('{"title":"Module: assignWithDepth","description":"","frontmatter":{},"headers":[{"level":2,"title":"Table of contents","slug":"table-of-contents","link":"#table-of-contents","children":[{"level":3,"title":"Functions","slug":"functions","link":"#functions","children":[]}]},{"level":2,"title":"Functions","slug":"functions-1","link":"#functions-1","children":[{"level":3,"title":"default","slug":"default","link":"#default","children":[]}]}],"relativePath":"code/modules/assignWithDepth.md"}'),n={name:"code/modules/assignWithDepth.md"},o=a(`<p><a href="./../README.html">mermaid-docs</a> / <a href="./../modules.html">Exports</a> / assignWithDepth</p><h1 id="module-assignwithdepth" tabindex="-1">Module: assignWithDepth <a class="header-anchor" href="#module-assignwithdepth" aria-hidden="true">#</a></h1><h2 id="table-of-contents" tabindex="-1">Table of contents <a class="header-anchor" href="#table-of-contents" aria-hidden="true">#</a></h2><h3 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-hidden="true">#</a></h3><ul><li><a href="./assignWithDepth.html#default">default</a></li></ul><h2 id="functions-1" tabindex="-1">Functions <a class="header-anchor" href="#functions-1" aria-hidden="true">#</a></h2><h3 id="default" tabindex="-1">default <a class="header-anchor" href="#default" aria-hidden="true">#</a></h3><p>\u25B8 <strong>default</strong>(<code>dst</code>, <code>src</code>, <code>config?</code>): <code>any</code></p><p><strong><code>Function</code></strong></p><p>assignWithDepth Extends the functionality of ObjectConstructor.assign with the ability to merge arbitrary-depth objects For each key in src with path <code>k</code> (recursively) performs an Object.assign(dst[<code>k</code>], src[<code>k</code>]) with a slight change from the typical handling of undefined for dst[<code>k</code>]: instead of raising an error, dst[<code>k</code>] is auto-initialized to {} and effectively merged with src[<code>k</code>] Additionally, dissimilar types will not clobber unless the config.clobber parameter === true. Example:</p><div class="language-js"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> config_0 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">bar</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">bar</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> config_1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">bar</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">assignWithDepth</span><span style="color:#A6ACCD;">(config_0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> config_1)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(result)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;">//-&gt; result: { foo: { bar: &#39;bar&#39; }, bar: &#39;bar&#39; }</span></span>
<span class="line"></span></code></pre></div><p>Traditional Object.assign would have clobbered foo in config_0 with foo in config_1. If src is a destructured array of objects and dst is not an array, assignWithDepth will apply each element of src to dst in order.</p><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>dst</code></td><td style="text-align:left;"><code>any</code></td><td style="text-align:left;">The destination of the merge</td></tr><tr><td style="text-align:left;"><code>src</code></td><td style="text-align:left;"><code>any</code></td><td style="text-align:left;">The source object(s) to merge into destination</td></tr><tr><td style="text-align:left;"><code>config?</code></td><td style="text-align:left;"><code>Object</code></td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;"><code>config.clobber</code></td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;"><code>config.depth</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">-</td></tr></tbody></table><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-hidden="true">#</a></h4><p><code>any</code></p><h4 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-hidden="true">#</a></h4><p><a href="https://github.com/emersonbottero/mermaid-docs/blob/f565dc0/src/assignWithDepth.js#L29" target="_blank" rel="noreferrer">src/assignWithDepth.js:29</a></p>`,18),l=[o];function r(c,p,d,i,h,y){return s(),t("div",null,l)}const g=e(n,[["render",r]]);export{f as __pageData,g as default};
