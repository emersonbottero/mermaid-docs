import{_ as s,c as a,o as n,d as e}from"./app.ef92c309.js";const A=JSON.parse('{"title":"Adding a New Diagram/Chart \u{1F4CA}","description":"","frontmatter":{},"headers":[{"level":3,"title":"Step 1: Grammar & Parsing","slug":"step-1-grammar-parsing","link":"#step-1-grammar-parsing","children":[]},{"level":3,"title":"Step 2: Rendering","slug":"step-2-rendering","link":"#step-2-rendering","children":[]},{"level":3,"title":"Step 3: Detection of the new diagram type","slug":"step-3-detection-of-the-new-diagram-type","link":"#step-3-detection-of-the-new-diagram-type","children":[]},{"level":3,"title":"Step 4: The final piece - triggering the rendering","slug":"step-4-the-final-piece-triggering-the-rendering","link":"#step-4-the-final-piece-triggering-the-rendering","children":[]},{"level":2,"title":"Usage of the parser as a separate module","slug":"usage-of-the-parser-as-a-separate-module","link":"#usage-of-the-parser-as-a-separate-module","children":[{"level":3,"title":"Setup","slug":"setup","link":"#setup","children":[]},{"level":3,"title":"Parsing","slug":"parsing","link":"#parsing","children":[]},{"level":3,"title":"Data extraction","slug":"data-extraction","link":"#data-extraction","children":[]}]},{"level":2,"title":"Layout","slug":"layout","link":"#layout","children":[{"level":3,"title":"Common parts of a diagram","slug":"common-parts-of-a-diagram","link":"#common-parts-of-a-diagram","children":[]}]},{"level":2,"title":"Accessibility","slug":"accessibility","link":"#accessibility","children":[]},{"level":2,"title":"Theming","slug":"theming","link":"#theming","children":[]}],"relativePath":"community/newDiagram.md"}'),l={name:"community/newDiagram.md"},p=e(`<h1 id="adding-a-new-diagram-chart-\u{1F4CA}" tabindex="-1">Adding a New Diagram/Chart \u{1F4CA} <a class="header-anchor" href="#adding-a-new-diagram-chart-\u{1F4CA}" aria-hidden="true">#</a></h1><h3 id="step-1-grammar-parsing" tabindex="-1">Step 1: Grammar &amp; Parsing <a class="header-anchor" href="#step-1-grammar-parsing" aria-hidden="true">#</a></h3><h4 id="grammar" tabindex="-1">Grammar <a class="header-anchor" href="#grammar" aria-hidden="true">#</a></h4><p>This would be to define a jison grammar for the new diagram type. That should start with a way to identify that the text in the mermaid tag is a diagram of that type. Create a new folder under diagrams for your new diagram type and a parser folder in it. This leads us to step 2.</p><p>For instance:</p><ul><li>the flowchart starts with the keyword graph.</li><li>the sequence diagram starts with the keyword sequenceDiagram</li></ul><h4 id="store-data-found-during-parsing" tabindex="-1">Store data found during parsing <a class="header-anchor" href="#store-data-found-during-parsing" aria-hidden="true">#</a></h4><p>There are some jison specific sub steps here where the parser stores the data encountered when parsing the diagram, this data is later used by the renderer. You can during the parsing call a object provided to the parser by the user of the parser. This object can be called during parsing for storing data.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">statement</span></span>
<span class="line"><span style="color:#A6ACCD;">	: &#39;participant&#39; actor  { $$=&#39;actor&#39;; }</span></span>
<span class="line"><span style="color:#A6ACCD;">	| signal               { $$=&#39;signal&#39;; }</span></span>
<span class="line"><span style="color:#A6ACCD;">	| note_statement       { $$=&#39;note&#39;;  }</span></span>
<span class="line"><span style="color:#A6ACCD;">	| &#39;title&#39; message      { yy.setTitle($2);  }</span></span>
<span class="line"><span style="color:#A6ACCD;">	;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>In the extract of the grammar above, it is defined that a call to the setTitle method in the data object will be done when parsing and the title keyword is encountered.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Make sure that the <code>parseError</code> function for the parser is defined and calling <code>mermaid.parseError</code>. This way a common way of detecting parse errors is provided for the end-user.</p></div><p>For more info look in the example diagram type:</p><p>The <code>yy</code> object has the following function:</p><div class="language-javascript"><button class="copy"></button><span class="lang">javascript</span><pre><code><span class="line"><span style="color:#89DDFF;">exports.</span><span style="color:#82AAFF;">parseError</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">hash</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">mermaid</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parseError</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">hash</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>when parsing the <code>yy</code> object is initialized as per below:</p><div class="language-javascript"><button class="copy"></button><span class="lang">javascript</span><pre><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> parser</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">parser </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> exampleParser</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">parser</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">parser</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">yy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> db</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="step-2-rendering" tabindex="-1">Step 2: Rendering <a class="header-anchor" href="#step-2-rendering" aria-hidden="true">#</a></h3><p>Write a renderer that given the data found during parsing renders the diagram. To look at an example look at sequenceRenderer.js rather then the flowchart renderer as this is a more generic example.</p><p>Place the renderer in the diagram folder.</p><h3 id="step-3-detection-of-the-new-diagram-type" tabindex="-1">Step 3: Detection of the new diagram type <a class="header-anchor" href="#step-3-detection-of-the-new-diagram-type" aria-hidden="true">#</a></h3><p>The second thing to do is to add the capability to detect the new new diagram to type to the detectType in utils.js. The detection should return a key for the new diagram type.</p><h3 id="step-4-the-final-piece-triggering-the-rendering" tabindex="-1">Step 4: The final piece - triggering the rendering <a class="header-anchor" href="#step-4-the-final-piece-triggering-the-rendering" aria-hidden="true">#</a></h3><p>At this point when mermaid is trying to render the diagram, it will detect it as being of the new type but there will be no match when trying to render the diagram. To fix this add a new case in the switch statement in main.js:init this should match the diagram type returned from step #2. The code in this new case statement should call the renderer for the diagram type with the data found by the parser as an argument.</p><h2 id="usage-of-the-parser-as-a-separate-module" tabindex="-1">Usage of the parser as a separate module <a class="header-anchor" href="#usage-of-the-parser-as-a-separate-module" aria-hidden="true">#</a></h2><h3 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-hidden="true">#</a></h3><div class="language-javascript"><button class="copy"></button><span class="lang">javascript</span><pre><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> graph </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./graphDb</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> flow </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./parser/flow</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">flow</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">parser</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">yy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> graph</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="parsing" tabindex="-1">Parsing <a class="header-anchor" href="#parsing" aria-hidden="true">#</a></h3><div class="language-javascript"><button class="copy"></button><span class="lang">javascript</span><pre><code><span class="line"><span style="color:#A6ACCD;">flow</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">parser</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#A6ACCD;">(text)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="data-extraction" tabindex="-1">Data extraction <a class="header-anchor" href="#data-extraction" aria-hidden="true">#</a></h3><div class="language-javascript"><button class="copy"></button><span class="lang">javascript</span><pre><code><span class="line"><span style="color:#A6ACCD;">graph</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDirection</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">graph</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getVertices</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">graph</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getEdges</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>The parser is also exposed in the mermaid api by calling:</p><div class="language-javascript"><button class="copy"></button><span class="lang">javascript</span><pre><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> parser </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> mermaid</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getParser</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Note that the parse needs a graph object to store the data as per:</p><div class="language-javascript"><button class="copy"></button><span class="lang">javascript</span><pre><code><span class="line"><span style="color:#A6ACCD;">flow</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">parser</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">yy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> graph</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Look at <code>graphDb.js</code> for more details on that object.</p><h2 id="layout" tabindex="-1">Layout <a class="header-anchor" href="#layout" aria-hidden="true">#</a></h2><p>If you are using a dagre based layout, please use flowchart-v2 as a template and by doing that you will be using dagre-wrapper instead of dagreD3 which we are migrating away from.</p><h3 id="common-parts-of-a-diagram" tabindex="-1">Common parts of a diagram <a class="header-anchor" href="#common-parts-of-a-diagram" aria-hidden="true">#</a></h3><p>There are a few features that are common between the different types of diagrams. We try to standardize the diagrams that work as similar as possible for the end user. The commonalities are:</p><ul><li>Directives, a way of modifying the diagram configuration from within the diagram code.</li><li>Accessibility, a way for an author to provide additional information like titles and descriptions to people accessing a text with diagrams using a screen reader.</li><li>Themes, there is a common way to modify the styling of diagrams in Mermaid.</li><li>Comments should follow mermaid standards</li></ul><p>Here some pointers on how to handle these different areas.</p><h4 id="directives" tabindex="-1"><a href="./../intro/directives.html">Directives</a> <a class="header-anchor" href="#directives" aria-hidden="true">#</a></h4><p>Here is example handling from flowcharts: Jison:</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">/* lexical grammar */</span></span>
<span class="line"><span style="color:#A6ACCD;">%lex</span></span>
<span class="line"><span style="color:#A6ACCD;">%x open_directive</span></span>
<span class="line"><span style="color:#A6ACCD;">%x type_directive</span></span>
<span class="line"><span style="color:#A6ACCD;">%x arg_directive</span></span>
<span class="line"><span style="color:#A6ACCD;">%x close_directive</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">\\%\\%\\{                                                          { this.begin(&#39;open_directive&#39;); return &#39;open_directive&#39;; }</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;open_directive&gt;((?:(?!\\}\\%\\%)[^:.])*)                          { this.begin(&#39;type_directive&#39;); return &#39;type_directive&#39;; }</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;type_directive&gt;&quot;:&quot;                                             { this.popState(); this.begin(&#39;arg_directive&#39;); return &#39;:&#39;; }</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;type_directive,arg_directive&gt;\\}\\%\\%                            { this.popState(); this.popState(); return &#39;close_directive&#39;; }</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;arg_directive&gt;((?:(?!\\}\\%\\%).|\\n)*)                            return &#39;arg_directive&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">/* language grammar */</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">/* ... */</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">directive</span></span>
<span class="line"><span style="color:#A6ACCD;">  : openDirective typeDirective closeDirective separator</span></span>
<span class="line"><span style="color:#A6ACCD;">  | openDirective typeDirective &#39;:&#39; argDirective closeDirective separator</span></span>
<span class="line"><span style="color:#A6ACCD;">  ;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">openDirective</span></span>
<span class="line"><span style="color:#A6ACCD;">  : open_directive { yy.parseDirective(&#39;%%{&#39;, &#39;open_directive&#39;); }</span></span>
<span class="line"><span style="color:#A6ACCD;">  ;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">typeDirective</span></span>
<span class="line"><span style="color:#A6ACCD;">  : type_directive { yy.parseDirective($1, &#39;type_directive&#39;); }</span></span>
<span class="line"><span style="color:#A6ACCD;">  ;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">argDirective</span></span>
<span class="line"><span style="color:#A6ACCD;">  : arg_directive { $1 = $1.trim().replace(/&#39;/g, &#39;&quot;&#39;); yy.parseDirective($1, &#39;arg_directive&#39;); }</span></span>
<span class="line"><span style="color:#A6ACCD;">  ;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">closeDirective</span></span>
<span class="line"><span style="color:#A6ACCD;">  : close_directive { yy.parseDirective(&#39;}%%&#39;, &#39;close_directive&#39;, &#39;flowchart&#39;); }</span></span>
<span class="line"><span style="color:#A6ACCD;">  ;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>It is probably a good idea to keep the handling similar to this in your new diagram. The parseDirective function is provided by the mermaidAPI.</p><h2 id="accessibility" tabindex="-1">Accessibility <a class="header-anchor" href="#accessibility" aria-hidden="true">#</a></h2><p>The syntax for adding title and description looks like this:</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">accTitle: The title</span></span>
<span class="line"><span style="color:#A6ACCD;">accDescr: The description</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">accDescr {</span></span>
<span class="line"><span style="color:#A6ACCD;">	Syntax for a description text</span></span>
<span class="line"><span style="color:#A6ACCD;">	written on multiple lines.</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>In a similar way to the directives the jison syntax are quite similar between the diagrams.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">* lexical grammar */</span></span>
<span class="line"><span style="color:#A6ACCD;">%lex</span></span>
<span class="line"><span style="color:#A6ACCD;">%x acc_title</span></span>
<span class="line"><span style="color:#A6ACCD;">%x acc_descr</span></span>
<span class="line"><span style="color:#A6ACCD;">%x acc_descr_multiline</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">%%</span></span>
<span class="line"><span style="color:#A6ACCD;">accTitle\\s*&quot;:&quot;\\s*                                { this.begin(&quot;acc_title&quot;);return &#39;acc_title&#39;; }</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;acc_title&gt;(?!\\n|;|#)*[^\\n]*                     { this.popState(); return &quot;acc_title_value&quot;; }</span></span>
<span class="line"><span style="color:#A6ACCD;">accDescr\\s*&quot;:&quot;\\s*                                { this.begin(&quot;acc_descr&quot;);return &#39;acc_descr&#39;; }</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;acc_descr&gt;(?!\\n|;|#)*[^\\n]*                     { this.popState(); return &quot;acc_descr_value&quot;; }</span></span>
<span class="line"><span style="color:#A6ACCD;">accDescr\\s*&quot;{&quot;\\s*                                { this.begin(&quot;acc_descr_multiline&quot;);}</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;acc_descr_multiline&gt;[\\}]                        { this.popState(); }</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;acc_descr_multiline&gt;[^\\}]*                      return &quot;acc_descr_multiline_value&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">statement</span></span>
<span class="line"><span style="color:#A6ACCD;">    : acc_title acc_title_value  { $$=$2.trim();yy.setTitle($$); }</span></span>
<span class="line"><span style="color:#A6ACCD;">    | acc_descr acc_descr_value  { $$=$2.trim();yy.setAccDescription($$); }</span></span>
<span class="line"><span style="color:#A6ACCD;">    | acc_descr_multiline_value { $$=$1.trim();yy.setAccDescription($$); }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>The functions for setting title and description are provided by a common module. This is the import from flowDb.js:</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">import {</span></span>
<span class="line"><span style="color:#A6ACCD;">  setAccTitle,</span></span>
<span class="line"><span style="color:#A6ACCD;">  getAccTitle,</span></span>
<span class="line"><span style="color:#A6ACCD;">  getAccDescription,</span></span>
<span class="line"><span style="color:#A6ACCD;">  setAccDescription,</span></span>
<span class="line"><span style="color:#A6ACCD;">  clear as commonClear,</span></span>
<span class="line"><span style="color:#A6ACCD;">} from &#39;../../commonDb&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>For rendering the accessibility tags you have again an existing function you can use.</p><p><strong>In the renderer:</strong></p><div class="language-js"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> addSVGAccessibilityFields </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">../../accessibility</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">/* ... */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// Adds title and description to the flow chart</span></span>
<span class="line"><span style="color:#82AAFF;">addSVGAccessibilityFields</span><span style="color:#A6ACCD;">(parser</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">yy</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> svg</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> id)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="theming" tabindex="-1">Theming <a class="header-anchor" href="#theming" aria-hidden="true">#</a></h2><p>Mermaid supports themes and has an integrated theming engine. You can read more about how the themes can be used <a href="./../config/theming.html">in the docs</a>.</p><p>When adding themes to a diagram it comes down to a few important locations in the code.</p><p>The entry point for the styling engine is in <strong>src/styles.js</strong>. The getStyles function will be called by Mermaid when the styles are being applied to the diagram.</p><p>This function will in turn call a function <em>your diagram should provide</em> returning the css for the new diagram. The diagram specific, also which is commonly also called getStyles and located in the folder for your diagram under src/diagrams and should be named styles.js. The getStyles function will be called with the theme options as an argument like in the following example:</p><div class="language-js"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> getStyles </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">    .line {</span></span>
<span class="line"><span style="color:#C3E88D;">      stroke-width: 1;</span></span>
<span class="line"><span style="color:#C3E88D;">      stroke: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lineColor</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">;</span></span>
<span class="line"><span style="color:#C3E88D;">      stroke-dasharray: 2;</span></span>
<span class="line"><span style="color:#C3E88D;">    }</span></span>
<span class="line"><span style="color:#C3E88D;">    // ...</span></span>
<span class="line"><span style="color:#C3E88D;">    </span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Note that you need to provide your function to the main getStyles by adding it into the themes object in <strong>src/styles.js</strong> like in the xyzDiagram in the provided example:</p><div class="language-js"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> themes </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  flowchart</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">flowchart-v2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> flowchart</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  sequence</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  xyzDiagram</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">//...</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>The actual options and values for the colors are defined in <strong>src/theme/theme-[xyz].js</strong>. If you provide the options your diagram needs in the existing theme files then the theming will work smoothly without hiccups.</p>`,64),t=[p];function o(r,i,c,d,y,h){return n(),a("div",null,t)}const C=s(l,[["render",o]]);export{A as __pageData,C as default};
