import{_ as t,o,c as l,b as e,d as s,e as i,a as n,r as d}from"./app.01379c4e.js";const V=JSON.parse('{"title":"Mindmap","description":"","frontmatter":{},"headers":[{"level":3,"title":"An example of a mindmap.","slug":"an-example-of-a-mindmap","link":"#an-example-of-a-mindmap","children":[]},{"level":2,"title":"Syntax","slug":"syntax","link":"#syntax","children":[]},{"level":2,"title":"Different shapes","slug":"different-shapes","link":"#different-shapes","children":[{"level":3,"title":"Square","slug":"square","link":"#square","children":[]},{"level":3,"title":"Rounded square","slug":"rounded-square","link":"#rounded-square","children":[]},{"level":3,"title":"Circle","slug":"circle","link":"#circle","children":[]},{"level":3,"title":"Bang","slug":"bang","link":"#bang","children":[]},{"level":3,"title":"Cloud","slug":"cloud","link":"#cloud","children":[]},{"level":3,"title":"Default","slug":"default","link":"#default","children":[]}]},{"level":2,"title":"icons","slug":"icons","link":"#icons","children":[]},{"level":2,"title":"Classes","slug":"classes","link":"#classes","children":[]},{"level":2,"title":"Unclear indentation","slug":"unclear-indentation","link":"#unclear-indentation","children":[]}],"relativePath":"syntax/mindmap.md"}'),r={name:"syntax/mindmap.md"},c=s("h1",{id:"mindmap",tabindex:"-1"},[i("Mindmap "),s("a",{class:"header-anchor",href:"#mindmap","aria-hidden":"true"},"#")],-1),p=s("blockquote",null,[s("p",null,"Mindmap: This is an experimental diagram for now. The syntax and properties can change in future releases. The syntax is stable except for the icon integration which is the experimental part.")],-1),h=s("p",null,'"A mind map is a diagram used to visually organize information into a hierarchy, showing relationships among pieces of the whole. It is often created around a single concept, drawn as an image in the center of a blank page, to which associated representations of ideas such as images, words and parts of words are added. Major ideas are connected directly to the central concept, and other ideas branch out from those major ideas." Wikipedia',-1),m=s("h3",{id:"an-example-of-a-mindmap",tabindex:"-1"},[i("An example of a mindmap. "),s("a",{class:"header-anchor",href:"#an-example-of-a-mindmap","aria-hidden":"true"},"#")],-1),u=n(`<h2 id="syntax" tabindex="-1">Syntax <a class="header-anchor" href="#syntax" aria-hidden="true">#</a></h2><p>The syntax for creating Mindmaps is simple and relies on indentation for setting the levels in the hierarchy.</p><p>In the following example you can see how there are 3 different levels. One with starting at the left of the text and another level with two rows starting at the same column, defining the node A. At the end there is one more level where the text is indented further then the previous lines defining the nodes B and C.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">mindmap</span></span>
<span class="line"><span style="color:#A6ACCD;">    Root</span></span>
<span class="line"><span style="color:#A6ACCD;">        A</span></span>
<span class="line"><span style="color:#A6ACCD;">            B</span></span>
<span class="line"><span style="color:#A6ACCD;">            C</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>In summary is a simple text outline where there are one node at the root level called <code>Root</code> which has one child <code>A</code>. <code>A</code> in turn has two children <code>B</code>and <code>C</code>. In the diagram below we can see this rendered as a mindmap.</p>`,5),A=n(`<p>In this way we can use a text outline to generate a hierarchical mindmap.</p><h2 id="different-shapes" tabindex="-1">Different shapes <a class="header-anchor" href="#different-shapes" aria-hidden="true">#</a></h2><p>Mermaids mindmaps can show node using different shapes. When specifying a shape for a node the syntax for the is similar to flowchart nodes, with an id followed by the shape definition and with the text within the shape delimiters. Where possible we try/will try to keep the same shapes as for flowcharts even though they are not all supported from the start.</p><p>Mindmap can show the following shapes:</p><h3 id="square" tabindex="-1">Square <a class="header-anchor" href="#square" aria-hidden="true">#</a></h3><h5>Code:</h5><div class="language-mermaid"><button class="copy"></button><span class="lang">mermaid</span><pre class="shiki" style="background-color:transparent;"><code><span class="line"><span style="color:#A6ACCD;">mindmap</span></span>
<span class="line"><span style="color:#A6ACCD;">    id[I am a square]</span></span>
<span class="line"></span></code></pre></div><h5>Render:</h5>`,8),_=n(`<h3 id="rounded-square" tabindex="-1">Rounded square <a class="header-anchor" href="#rounded-square" aria-hidden="true">#</a></h3><h5>Code:</h5><div class="language-mermaid"><button class="copy"></button><span class="lang">mermaid</span><pre class="shiki" style="background-color:transparent;"><code><span class="line"><span style="color:#A6ACCD;">mindmap</span></span>
<span class="line"><span style="color:#A6ACCD;">    id(I am a rounded square)</span></span>
<span class="line"></span></code></pre></div><h5>Render:</h5>`,4),g=n(`<h3 id="circle" tabindex="-1">Circle <a class="header-anchor" href="#circle" aria-hidden="true">#</a></h3><h5>Code:</h5><div class="language-mermaid"><button class="copy"></button><span class="lang">mermaid</span><pre class="shiki" style="background-color:transparent;"><code><span class="line"><span style="color:#A6ACCD;">mindmap</span></span>
<span class="line"><span style="color:#A6ACCD;">    id((I am a circle))</span></span>
<span class="line"></span></code></pre></div><h5>Render:</h5>`,4),C=n(`<h3 id="bang" tabindex="-1">Bang <a class="header-anchor" href="#bang" aria-hidden="true">#</a></h3><h5>Code:</h5><div class="language-mermaid"><button class="copy"></button><span class="lang">mermaid</span><pre class="shiki" style="background-color:transparent;"><code><span class="line"><span style="color:#A6ACCD;">mindmap</span></span>
<span class="line"><span style="color:#A6ACCD;">    id))I am a bang((</span></span>
<span class="line"></span></code></pre></div><h5>Render:</h5>`,4),f=n(`<h3 id="cloud" tabindex="-1">Cloud <a class="header-anchor" href="#cloud" aria-hidden="true">#</a></h3><h5>Code:</h5><div class="language-mermaid"><button class="copy"></button><span class="lang">mermaid</span><pre class="shiki" style="background-color:transparent;"><code><span class="line"><span style="color:#A6ACCD;">mindmap</span></span>
<span class="line"><span style="color:#A6ACCD;">    id)I am a cloud(</span></span>
<span class="line"></span></code></pre></div><h5>Render:</h5>`,4),y=n(`<h3 id="default" tabindex="-1">Default <a class="header-anchor" href="#default" aria-hidden="true">#</a></h3><h5>Code:</h5><div class="language-mermaid"><button class="copy"></button><span class="lang">mermaid</span><pre class="shiki" style="background-color:transparent;"><code><span class="line"><span style="color:#A6ACCD;">mindmap</span></span>
<span class="line"><span style="color:#A6ACCD;">    I am the default shape</span></span>
<span class="line"></span></code></pre></div><h5>Render:</h5>`,4),b=n(`<p>More shapes will be added, beginning with the shapes available in flowcharts.</p><h1 id="icons-and-classes" tabindex="-1">Icons and classes <a class="header-anchor" href="#icons-and-classes" aria-hidden="true">#</a></h1><h2 id="icons" tabindex="-1">icons <a class="header-anchor" href="#icons" aria-hidden="true">#</a></h2><p>As with flowcharts you can add icons to your nodes but with an updated syntax. The styling for the font based icons are added during the integration so that they are available for the web page. <em>This is not something a diagram author can do but has to be done with the site administrator or the integrator</em>. Once the icon fonts are in place you add them to the mind map nodes using the <code>::icon()</code> syntax. You place the classes for the icon within the parenthesis like in the following example where icons for material design and fontawesome 4 are displayed. The intention is that this approach should be used for all diagrams supporting icons. <strong>Experimental feature:</strong> This wider scope is also the reason Mindmaps are experimental as this syntax and approach could change.</p><h5>Code:</h5><div class="language-mermaid"><button class="copy"></button><span class="lang">mermaid</span><pre class="shiki" style="background-color:transparent;"><code><span class="line"><span style="color:#A6ACCD;">mindmap</span></span>
<span class="line"><span style="color:#A6ACCD;">    Root</span></span>
<span class="line"><span style="color:#A6ACCD;">        A</span></span>
<span class="line"><span style="color:#A6ACCD;">        ::icon(fa fa-book)</span></span>
<span class="line"><span style="color:#A6ACCD;">        B(B)</span></span>
<span class="line"><span style="color:#A6ACCD;">        ::icon(mdi mdi-skull-outline)</span></span>
<span class="line"></span></code></pre></div><h5>Render:</h5>`,7),T=n(`<h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-hidden="true">#</a></h2><p>Again the syntax for adding classes is similar to flowcharts. You can add classes using a triple colon following a number of css classes separated by space. In the following example one of the nodes has two custom classes attached urgent turning the background red and the text white and large increasing the font size:</p><h5>Code:</h5><div class="language-mermaid"><button class="copy"></button><span class="lang">mermaid</span><pre class="shiki" style="background-color:transparent;"><code><span class="line"><span style="color:#A6ACCD;">mindmap</span></span>
<span class="line"><span style="color:#A6ACCD;">    Root</span></span>
<span class="line"><span style="color:#A6ACCD;">        A[A]</span></span>
<span class="line"><span style="color:#A6ACCD;">        :::urgent large</span></span>
<span class="line"><span style="color:#A6ACCD;">        B(B)</span></span>
<span class="line"><span style="color:#A6ACCD;">        C</span></span>
<span class="line"></span></code></pre></div><h5>Render:</h5>`,5),w=n(`<p><em>These classes needs top be supplied by the site administrator.</em></p><h2 id="unclear-indentation" tabindex="-1">Unclear indentation <a class="header-anchor" href="#unclear-indentation" aria-hidden="true">#</a></h2><p>The actual indentation does not really matter only compared with the previous rows. If we take the previous example and disrupt it a little we can se how the calculations are performed. Let us start with placing C with a smaller indentation than <code>B</code>but larger then <code>A</code>.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">mindmap</span></span>
<span class="line"><span style="color:#A6ACCD;">    Root</span></span>
<span class="line"><span style="color:#A6ACCD;">        A</span></span>
<span class="line"><span style="color:#A6ACCD;">            B</span></span>
<span class="line"><span style="color:#A6ACCD;">          C</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>This outline is unclear as <code>B</code> clearly is a child of <code>A</code> but when we move on to <code>C</code> the clarity is lost. <code>C</code> is not a child of <code>B</code> with a higher indentation nor does it have the same indentation as <code>B</code>. The only thing that is clear is that the first node with smaller indentation, indicating a parent, is A. Then Mermaid relies on this known truth and compensates for the unclear indentation and selects <code>A</code> as a parent of <code>C</code> leading till the same diagram with <code>B</code> and <code>C</code> as siblings.</p>`,5);function x(D,v,k,I,S,R){const a=d("Mermaid");return o(),l("div",null,[c,p,h,m,e(a,{id:"mermaid_382ee149",graph:"mindmap%0A%20%20root((mindmap))%0A%20%20%20%20Origins%0A%20%20%20%20%20%20Long%20history%0A%20%20%20%20%20%20%3A%3Aicon(fa%20fa-book)%0A%20%20%20%20%20%20Popularisation%0A%20%20%20%20%20%20%20%20British%20popular%20psychology%20author%20Tony%20Buzan%0A%20%20%20%20Research%0A%20%20%20%20%20%20On%20effectivness%3Cbr%2F%3Eand%20eatures%0A%20%20%20%20%20%20On%20Automatic%20creation%0A%20%20%20%20%20%20%20%20Uses%0A%20%20%20%20%20%20%20%20%20%20%20%20Creative%20techniques%0A%20%20%20%20%20%20%20%20%20%20%20%20Strategic%20planning%0A%20%20%20%20%20%20%20%20%20%20%20%20Argument%20mapping%0A%20%20%20%20Tools%0A%20%20%20%20%20%20Pen%20and%20paper%0A%20%20%20%20%20%20Mermaid"}),u,e(a,{id:"mermaid_382ee16c",graph:"mindmap%0ARoot%0A%20%20%20%20A%0A%20%20%20%20%20%20B%0A%20%20%20%20%20%20C"}),A,e(a,{id:"me44",graph:"mindmap%0A%20%20%20%20id%5BI%20am%20a%20square%5D%0A"}),_,e(a,{id:"me48",graph:"mindmap%0A%20%20%20%20id(I%20am%20a%20rounded%20square)%0A"}),g,e(a,{id:"me52",graph:"mindmap%0A%20%20%20%20id((I%20am%20a%20circle))%0A"}),C,e(a,{id:"me56",graph:"mindmap%0A%20%20%20%20id))I%20am%20a%20bang((%0A"}),f,e(a,{id:"me60",graph:"mindmap%0A%20%20%20%20id)I%20am%20a%20cloud(%0A"}),y,e(a,{id:"me64",graph:"mindmap%0A%20%20%20%20I%20am%20the%20default%20shape%0A"}),b,e(a,{id:"me77",graph:"mindmap%0A%20%20%20%20Root%0A%20%20%20%20%20%20%20%20A%0A%20%20%20%20%20%20%20%20%3A%3Aicon(fa%20fa-book)%0A%20%20%20%20%20%20%20%20B(B)%0A%20%20%20%20%20%20%20%20%3A%3Aicon(mdi%20mdi-skull-outline)%0A"}),T,e(a,{id:"me84",graph:"mindmap%0A%20%20%20%20Root%0A%20%20%20%20%20%20%20%20A%5BA%5D%0A%20%20%20%20%20%20%20%20%3A%3A%3Aurgent%20large%0A%20%20%20%20%20%20%20%20B(B)%0A%20%20%20%20%20%20%20%20C%0A"}),w,e(a,{id:"mermaid_382ee245",graph:"mindmap%0ARoot%0A%20%20%20%20A%0A%20%20%20%20%20%20%20%20B%0A%20%20%20%20%20%20C"})])}const P=t(r,[["render",x]]);export{V as __pageData,P as default};
