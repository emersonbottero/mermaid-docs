import{_ as e,o as t,c as l,b as a,a as n,r as o}from"./app.640ec9d8.js";const L=JSON.parse('{"title":"State diagrams","description":"","frontmatter":{},"headers":[{"level":2,"title":"States","slug":"states","link":"#states","children":[]},{"level":2,"title":"Transitions","slug":"transitions","link":"#transitions","children":[]},{"level":2,"title":"Start and End","slug":"start-and-end","link":"#start-and-end","children":[]},{"level":2,"title":"Composite states","slug":"composite-states","link":"#composite-states","children":[]},{"level":2,"title":"Choice","slug":"choice","link":"#choice","children":[]},{"level":2,"title":"Forks","slug":"forks","link":"#forks","children":[]},{"level":2,"title":"Notes","slug":"notes","link":"#notes","children":[]},{"level":2,"title":"Concurrency","slug":"concurrency","link":"#concurrency","children":[]},{"level":2,"title":"Setting the direction of the diagram","slug":"setting-the-direction-of-the-diagram","link":"#setting-the-direction-of-the-diagram","children":[]},{"level":2,"title":"Comments","slug":"comments","link":"#comments","children":[]},{"level":2,"title":"Styling","slug":"styling","link":"#styling","children":[]},{"level":2,"title":"Spaces in state names","slug":"spaces-in-state-names","link":"#spaces-in-state-names","children":[]}],"relativePath":"syntax/stateDiagram.md"}'),p={name:"syntax/stateDiagram.md"},r=n(`<h1 id="state-diagrams" tabindex="-1">State diagrams <a class="header-anchor" href="#state-diagrams" aria-hidden="true">#</a></h1><blockquote><p>&quot;A state diagram is a type of diagram used in computer science and related fields to describe the behavior of systems. State diagrams require that the system described is composed of a finite number of states; sometimes, this is indeed the case, while at other times this is a reasonable abstraction.&quot; Wikipedia</p></blockquote><p>Mermaid can render state diagrams. The syntax tries to be compliant with the syntax used in plantUml as this will make it easier for users to share diagrams between mermaid and plantUml.</p><h5>Code:</h5><div class="language-mermaid"><button class="copy"></button><span class="lang">mermaid</span><pre class="shiki" style="background-color:transparent;"><code><span class="line"><span style="color:#89DDFF;">stateDiagram</span><span style="color:#A6ACCD;">-v2</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">[*]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> Still</span></span>
<span class="line"><span style="color:#A6ACCD;">    Still </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[*]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    Still </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> Moving</span></span>
<span class="line"><span style="color:#A6ACCD;">    Moving </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> Still</span></span>
<span class="line"><span style="color:#A6ACCD;">    Moving </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> Crash</span></span>
<span class="line"><span style="color:#A6ACCD;">    Crash </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[*]</span></span>
<span class="line"></span></code></pre></div><h5>Render:</h5>`,6),c=n(`<p>Older renderer:</p><h5>Code:</h5><div class="language-mermaid"><button class="copy"></button><span class="lang">mermaid</span><pre class="shiki" style="background-color:transparent;"><code><span class="line"><span style="color:#89DDFF;">stateDiagram</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">[*]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> Still</span></span>
<span class="line"><span style="color:#A6ACCD;">    Still </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[*]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    Still </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> Moving</span></span>
<span class="line"><span style="color:#A6ACCD;">    Moving </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> Still</span></span>
<span class="line"><span style="color:#A6ACCD;">    Moving </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> Crash</span></span>
<span class="line"><span style="color:#A6ACCD;">    Crash </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[*]</span></span>
<span class="line"></span></code></pre></div><h5>Render:</h5>`,4),i=n(`<p>In state diagrams systems are described in terms of its states and how the systems state can change to another state via a transitions. The example diagram above shows three states <strong>Still</strong>, <strong>Moving</strong> and <strong>Crash</strong>. You start in the state of Still. From Still you can change the state to Moving. In Moving you can change the state either back to Still or to Crash. There is no transition from Still to Crash.</p><h2 id="states" tabindex="-1">States <a class="header-anchor" href="#states" aria-hidden="true">#</a></h2><p>A state can be declared in multiple ways. The simplest way is to define a state id as a description.</p><h5>Code:</h5><div class="language-mermaid"><button class="copy"></button><span class="lang">mermaid</span><pre class="shiki" style="background-color:transparent;"><code><span class="line"><span style="color:#89DDFF;">stateDiagram</span><span style="color:#A6ACCD;">-v2</span></span>
<span class="line"><span style="color:#A6ACCD;">    s1</span></span>
<span class="line"></span></code></pre></div><h5>Render:</h5>`,6),D=n(`<p>Another way is by using the state keyword with a description as per below:</p><h5>Code:</h5><div class="language-mermaid"><button class="copy"></button><span class="lang">mermaid</span><pre class="shiki" style="background-color:transparent;"><code><span class="line"><span style="color:#89DDFF;">stateDiagram</span><span style="color:#A6ACCD;">-v2</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">state</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;This is a state description&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">as</span><span style="color:#A6ACCD;"> s2</span></span>
<span class="line"></span></code></pre></div><h5>Render:</h5>`,4),A=n(`<p>Another way to define a state with a description is to define the state id followed by a colon and the description:</p><h5>Code:</h5><div class="language-mermaid"><button class="copy"></button><span class="lang">mermaid</span><pre class="shiki" style="background-color:transparent;"><code><span class="line"><span style="color:#89DDFF;">stateDiagram</span><span style="color:#A6ACCD;">-v2</span></span>
<span class="line"><span style="color:#A6ACCD;">    s2 </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">This is a state description</span></span>
<span class="line"></span></code></pre></div><h5>Render:</h5>`,4),C=n(`<h2 id="transitions" tabindex="-1">Transitions <a class="header-anchor" href="#transitions" aria-hidden="true">#</a></h2><p>Transitions are path/edges when one state passes into another. This is represented using text arrow, &quot;--&gt;&quot;.</p><p>When you define a transition between two states and the states are not already defined the undefined states are defined with the id from the transition. You can later add descriptions to states defined this way.</p><h5>Code:</h5><div class="language-mermaid"><button class="copy"></button><span class="lang">mermaid</span><pre class="shiki" style="background-color:transparent;"><code><span class="line"><span style="color:#89DDFF;">stateDiagram</span><span style="color:#A6ACCD;">-v2</span></span>
<span class="line"><span style="color:#A6ACCD;">    s1 </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> s2</span></span>
<span class="line"></span></code></pre></div><h5>Render:</h5>`,6),y=n(`<p>It is possible to add text to a transition. To describe what it represents.</p><h5>Code:</h5><div class="language-mermaid"><button class="copy"></button><span class="lang">mermaid</span><pre class="shiki" style="background-color:transparent;"><code><span class="line"><span style="color:#89DDFF;">stateDiagram</span><span style="color:#A6ACCD;">-v2</span></span>
<span class="line"><span style="color:#A6ACCD;">    s1 </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> s2</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">A transition</span></span>
<span class="line"></span></code></pre></div><h5>Render:</h5>`,4),d=n(`<h2 id="start-and-end" tabindex="-1">Start and End <a class="header-anchor" href="#start-and-end" aria-hidden="true">#</a></h2><p>There are two special states indicating the start and stop of the diagram. These are written with the [*] syntax and the direction of the transition to it defines it either as a start or a stop state.</p><h5>Code:</h5><div class="language-mermaid"><button class="copy"></button><span class="lang">mermaid</span><pre class="shiki" style="background-color:transparent;"><code><span class="line"><span style="color:#89DDFF;">stateDiagram</span><span style="color:#A6ACCD;">-v2</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">[*]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> s1</span></span>
<span class="line"><span style="color:#A6ACCD;">    s1 </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[*]</span></span>
<span class="line"></span></code></pre></div><h5>Render:</h5>`,5),h=n(`<h2 id="composite-states" tabindex="-1">Composite states <a class="header-anchor" href="#composite-states" aria-hidden="true">#</a></h2><p>In a real world use of state diagrams you often end up with diagrams that are multi-dimensional as one state can have several internal states. These are called composite states in this terminology.</p><p>In order to define a composite state you need to use the state keyword followed by an id and the body of the composite state between {}. See the example below:</p><h5>Code:</h5><div class="language-mermaid"><button class="copy"></button><span class="lang">mermaid</span><pre class="shiki" style="background-color:transparent;"><code><span class="line"><span style="color:#89DDFF;">stateDiagram</span><span style="color:#A6ACCD;">-v2</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">[*]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> First</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">state</span><span style="color:#A6ACCD;"> First </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">[*]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> second</span></span>
<span class="line"><span style="color:#A6ACCD;">        second </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[*]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h5>Render:</h5>`,6),F=n(`<p>You can do this in several layers:</p><h5>Code:</h5><div class="language-mermaid"><button class="copy"></button><span class="lang">mermaid</span><pre class="shiki" style="background-color:transparent;"><code><span class="line"><span style="color:#89DDFF;">stateDiagram</span><span style="color:#A6ACCD;">-v2</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">[*]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> First</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">state</span><span style="color:#A6ACCD;"> First </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">[*]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> Second</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">state</span><span style="color:#A6ACCD;"> Second </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">[*]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> second</span></span>
<span class="line"><span style="color:#A6ACCD;">            second </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> Third</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">state</span><span style="color:#A6ACCD;"> Third </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">[*]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> third</span></span>
<span class="line"><span style="color:#A6ACCD;">                third </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[*]</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h5>Render:</h5>`,4),g=n(`<p>You can also define transitions also between composite states:</p><h5>Code:</h5><div class="language-mermaid"><button class="copy"></button><span class="lang">mermaid</span><pre class="shiki" style="background-color:transparent;"><code><span class="line"><span style="color:#89DDFF;">stateDiagram</span><span style="color:#A6ACCD;">-v2</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">[*]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> First</span></span>
<span class="line"><span style="color:#A6ACCD;">    First </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> Second</span></span>
<span class="line"><span style="color:#A6ACCD;">    First </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> Third</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">state</span><span style="color:#A6ACCD;"> First </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">[*]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> fir</span></span>
<span class="line"><span style="color:#A6ACCD;">        fir </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[*]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">state</span><span style="color:#A6ACCD;"> Second </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">[*]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> sec</span></span>
<span class="line"><span style="color:#A6ACCD;">        sec </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[*]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">state</span><span style="color:#A6ACCD;"> Third </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">[*]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> thi</span></span>
<span class="line"><span style="color:#A6ACCD;">        thi </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[*]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h5>Render:</h5>`,4),_=n(`<p><em>You can not define transitions between internal states belonging to different composite states</em></p><h2 id="choice" tabindex="-1">Choice <a class="header-anchor" href="#choice" aria-hidden="true">#</a></h2><p>Sometimes you need to model a choice between two or more paths, you can do so using &lt;&lt;choice&gt;&gt;.</p><h5>Code:</h5><div class="language-mermaid"><button class="copy"></button><span class="lang">mermaid</span><pre class="shiki" style="background-color:transparent;"><code><span class="line"><span style="color:#89DDFF;">stateDiagram</span><span style="color:#A6ACCD;">-v2</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">state</span><span style="color:#A6ACCD;"> if_state &lt;&lt;choice&gt;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">[*]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> IsPositive</span></span>
<span class="line"><span style="color:#A6ACCD;">    IsPositive </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> if_state</span></span>
<span class="line"><span style="color:#A6ACCD;">    if_state </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> False</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">if n</span><span style="color:#A6ACCD;"> &lt; 0</span></span>
<span class="line"><span style="color:#A6ACCD;">    if_state </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> True </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">if n</span><span style="color:#A6ACCD;"> &gt;= 0</span></span>
<span class="line"></span></code></pre></div><h5>Render:</h5>`,6),m=n(`<h2 id="forks" tabindex="-1">Forks <a class="header-anchor" href="#forks" aria-hidden="true">#</a></h2><p>It is possible to specify a fork in the diagram using &lt;&lt;fork&gt;&gt; &lt;&lt;join&gt;&gt;.</p><h5>Code:</h5><div class="language-mermaid"><button class="copy"></button><span class="lang">mermaid</span><pre class="shiki" style="background-color:transparent;"><code><span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">stateDiagram</span><span style="color:#A6ACCD;">-v2</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">state</span><span style="color:#A6ACCD;"> fork_state </span><span style="color:#89DDFF;">&lt;&lt;fork&gt;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">[*]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> fork_state</span></span>
<span class="line"><span style="color:#A6ACCD;">      fork_state </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> State2</span></span>
<span class="line"><span style="color:#A6ACCD;">      fork_state </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> State3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">state</span><span style="color:#A6ACCD;"> join_state </span><span style="color:#89DDFF;">&lt;&lt;join&gt;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      State2 </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> join_state</span></span>
<span class="line"><span style="color:#A6ACCD;">      State3 </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> join_state</span></span>
<span class="line"><span style="color:#A6ACCD;">      join_state </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> State4</span></span>
<span class="line"><span style="color:#A6ACCD;">      State4 </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[*]</span></span>
<span class="line"></span></code></pre></div><h5>Render:</h5>`,5),u=n(`<h2 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-hidden="true">#</a></h2><p>Sometimes nothing says it better then a Post-it note. That is also the case in state diagrams.</p><p>Here you can choose to put the note to the <em>right of</em> or to the <em>left of</em> a node.</p><h5>Code:</h5><div class="language-mermaid"><button class="copy"></button><span class="lang">mermaid</span><pre class="shiki" style="background-color:transparent;"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">stateDiagram</span><span style="color:#A6ACCD;">-v2</span></span>
<span class="line"><span style="color:#A6ACCD;">        State1: The </span><span style="color:#89DDFF;">state</span><span style="color:#A6ACCD;"> with a note</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">note right of</span><span style="color:#A6ACCD;"> State1</span></span>
<span class="line"><span style="color:#C3E88D;">            Important information! You can write</span></span>
<span class="line"><span style="color:#C3E88D;">            notes.</span></span>
<span class="line"><span style="color:#C3E88D;">        </span><span style="color:#89DDFF;">end note</span></span>
<span class="line"><span style="color:#A6ACCD;">        State1 </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> State2</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">note left of</span><span style="color:#A6ACCD;"> State2 </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">This is the note to the left</span><span style="color:#A6ACCD;">.</span></span>
<span class="line"></span></code></pre></div><h5>Render:</h5>`,6),f=n(`<h2 id="concurrency" tabindex="-1">Concurrency <a class="header-anchor" href="#concurrency" aria-hidden="true">#</a></h2><p>As in plantUml you can specify concurrency using the -- symbol.</p><h5>Code:</h5><div class="language-mermaid"><button class="copy"></button><span class="lang">mermaid</span><pre class="shiki" style="background-color:transparent;"><code><span class="line"><span style="color:#89DDFF;">stateDiagram</span><span style="color:#A6ACCD;">-v2</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">[*]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> Active</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">state</span><span style="color:#A6ACCD;"> Active </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">[*]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> NumLockOff</span></span>
<span class="line"><span style="color:#A6ACCD;">        NumLockOff </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> NumLockOn </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">EvNumLockPressed</span></span>
<span class="line"><span style="color:#A6ACCD;">        NumLockOn </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> NumLockOff </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">EvNumLockPressed</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">[*]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> CapsLockOff</span></span>
<span class="line"><span style="color:#A6ACCD;">        CapsLockOff </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> CapsLockOn </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">EvCapsLockPressed</span></span>
<span class="line"><span style="color:#A6ACCD;">        CapsLockOn </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> CapsLockOff </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">EvCapsLockPressed</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">--</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">[*]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> ScrollLockOff</span></span>
<span class="line"><span style="color:#A6ACCD;">        ScrollLockOff </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> ScrollLockOn </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">EvScrollLockPressed</span></span>
<span class="line"><span style="color:#A6ACCD;">        ScrollLockOn </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> ScrollLockOff </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">EvScrollLockPressed</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h5>Render:</h5>`,5),S=n(`<h2 id="setting-the-direction-of-the-diagram" tabindex="-1">Setting the direction of the diagram <a class="header-anchor" href="#setting-the-direction-of-the-diagram" aria-hidden="true">#</a></h2><p>With state diagrams you can use the direction statement to set the direction which the diagram will render like in this example.</p><h5>Code:</h5><div class="language-mermaid"><button class="copy"></button><span class="lang">mermaid</span><pre class="shiki" style="background-color:transparent;"><code><span class="line"><span style="color:#89DDFF;">stateDiagram</span></span>
<span class="line"><span style="color:#A6ACCD;">    direction LR</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">[*]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> A</span></span>
<span class="line"><span style="color:#A6ACCD;">    A </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> B</span></span>
<span class="line"><span style="color:#A6ACCD;">    B </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> C</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">state</span><span style="color:#A6ACCD;"> B </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      direction LR</span></span>
<span class="line"><span style="color:#A6ACCD;">      a </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> b</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    B </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> D</span></span>
<span class="line"></span></code></pre></div><h5>Render:</h5>`,5),T=n(`<h2 id="comments" tabindex="-1">Comments <a class="header-anchor" href="#comments" aria-hidden="true">#</a></h2><p>Comments can be entered within a state diagram chart, which will be ignored by the parser. Comments need to be on their own line, and must be prefaced with <code>%%</code> (double percent signs). Any text after the start of the comment to the next newline will be treated as a comment, including any diagram syntax</p><div class="language-mermaid"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre><code><span class="line"><span style="color:#89DDFF;">stateDiagram</span><span style="color:#A6ACCD;">-v2</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">[*]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> Still</span></span>
<span class="line"><span style="color:#A6ACCD;">    Still </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[*]</span></span>
<span class="line"><span style="color:#676E95;">%% this is a comment</span></span>
<span class="line"><span style="color:#A6ACCD;">    Still </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> Moving</span></span>
<span class="line"><span style="color:#A6ACCD;">    Moving </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> Still %% another </span><span style="color:#C3E88D;">comment</span></span>
<span class="line"><span style="color:#A6ACCD;">    Moving </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> Crash</span></span>
<span class="line"><span style="color:#A6ACCD;">    Crash </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[*]</span></span>
<span class="line"></span></code></pre></div><h2 id="styling" tabindex="-1">Styling <a class="header-anchor" href="#styling" aria-hidden="true">#</a></h2><p>Styling of the a state diagram is done by defining a number of css classes. During rendering these classes are extracted from the file located at src/themes/state.scss</p><h2 id="spaces-in-state-names" tabindex="-1">Spaces in state names <a class="header-anchor" href="#spaces-in-state-names" aria-hidden="true">#</a></h2><p>Spaces can be added to a state by defining it at the top and referencing the acronym later.</p><h5>Code:</h5><div class="language-mermaid"><button class="copy"></button><span class="lang">mermaid</span><pre class="shiki" style="background-color:transparent;"><code><span class="line"><span style="color:#89DDFF;">stateDiagram</span><span style="color:#A6ACCD;">-v2</span></span>
<span class="line"><span style="color:#A6ACCD;">    Yswsii: Your </span><span style="color:#89DDFF;">state</span><span style="color:#A6ACCD;"> with spaces in it</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">[*]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> Yswsii</span></span>
<span class="line"></span></code></pre></div><h5>Render:</h5>`,10);function v(E,k,b,w,P,B){const s=o("Mermaid");return t(),l("div",null,[r,a(s,{id:"me11",graph:"stateDiagram-v2%0A%20%20%20%20%5B*%5D%20--%3E%20Still%0A%20%20%20%20Still%20--%3E%20%5B*%5D%0A%0A%20%20%20%20Still%20--%3E%20Moving%0A%20%20%20%20Moving%20--%3E%20Still%0A%20%20%20%20Moving%20--%3E%20Crash%0A%20%20%20%20Crash%20--%3E%20%5B*%5D%0A"}),c,a(s,{id:"me15",graph:"stateDiagram%0A%20%20%20%20%5B*%5D%20--%3E%20Still%0A%20%20%20%20Still%20--%3E%20%5B*%5D%0A%0A%20%20%20%20Still%20--%3E%20Moving%0A%20%20%20%20Moving%20--%3E%20Still%0A%20%20%20%20Moving%20--%3E%20Crash%0A%20%20%20%20Crash%20--%3E%20%5B*%5D%0A"}),i,a(s,{id:"me25",graph:"stateDiagram-v2%0A%20%20%20%20s1%0A"}),D,a(s,{id:"me29",graph:"stateDiagram-v2%0A%20%20%20%20state%20%22This%20is%20a%20state%20description%22%20as%20s2%0A"}),A,a(s,{id:"me33",graph:"stateDiagram-v2%0A%20%20%20%20s2%20%3A%20This%20is%20a%20state%20description%0A"}),C,a(s,{id:"me43",graph:"stateDiagram-v2%0A%20%20%20%20s1%20--%3E%20s2%0A"}),y,a(s,{id:"me47",graph:"stateDiagram-v2%0A%20%20%20%20s1%20--%3E%20s2%3A%20A%20transition%0A"}),d,a(s,{id:"me54",graph:"stateDiagram-v2%0A%20%20%20%20%5B*%5D%20--%3E%20s1%0A%20%20%20%20s1%20--%3E%20%5B*%5D%0A"}),h,a(s,{id:"me64",graph:"stateDiagram-v2%0A%20%20%20%20%5B*%5D%20--%3E%20First%0A%20%20%20%20state%20First%20%7B%0A%20%20%20%20%20%20%20%20%5B*%5D%20--%3E%20second%0A%20%20%20%20%20%20%20%20second%20--%3E%20%5B*%5D%0A%20%20%20%20%7D%0A"}),F,a(s,{id:"me68",graph:"stateDiagram-v2%0A%20%20%20%20%5B*%5D%20--%3E%20First%0A%0A%20%20%20%20state%20First%20%7B%0A%20%20%20%20%20%20%20%20%5B*%5D%20--%3E%20Second%0A%0A%20%20%20%20%20%20%20%20state%20Second%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%5B*%5D%20--%3E%20second%0A%20%20%20%20%20%20%20%20%20%20%20%20second%20--%3E%20Third%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20state%20Third%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B*%5D%20--%3E%20third%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20third%20--%3E%20%5B*%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A"}),g,a(s,{id:"me72",graph:"stateDiagram-v2%0A%20%20%20%20%5B*%5D%20--%3E%20First%0A%20%20%20%20First%20--%3E%20Second%0A%20%20%20%20First%20--%3E%20Third%0A%0A%20%20%20%20state%20First%20%7B%0A%20%20%20%20%20%20%20%20%5B*%5D%20--%3E%20fir%0A%20%20%20%20%20%20%20%20fir%20--%3E%20%5B*%5D%0A%20%20%20%20%7D%0A%20%20%20%20state%20Second%20%7B%0A%20%20%20%20%20%20%20%20%5B*%5D%20--%3E%20sec%0A%20%20%20%20%20%20%20%20sec%20--%3E%20%5B*%5D%0A%20%20%20%20%7D%0A%20%20%20%20state%20Third%20%7B%0A%20%20%20%20%20%20%20%20%5B*%5D%20--%3E%20thi%0A%20%20%20%20%20%20%20%20thi%20--%3E%20%5B*%5D%0A%20%20%20%20%7D%0A"}),_,a(s,{id:"me82",graph:"stateDiagram-v2%0A%20%20%20%20state%20if_state%20%3C%3Cchoice%3E%3E%0A%20%20%20%20%5B*%5D%20--%3E%20IsPositive%0A%20%20%20%20IsPositive%20--%3E%20if_state%0A%20%20%20%20if_state%20--%3E%20False%3A%20if%20n%20%3C%200%0A%20%20%20%20if_state%20--%3E%20True%20%3A%20if%20n%20%3E%3D%200%0A"}),m,a(s,{id:"me89",graph:"%20%20%20stateDiagram-v2%0A%20%20%20%20state%20fork_state%20%3C%3Cfork%3E%3E%0A%20%20%20%20%20%20%5B*%5D%20--%3E%20fork_state%0A%20%20%20%20%20%20fork_state%20--%3E%20State2%0A%20%20%20%20%20%20fork_state%20--%3E%20State3%0A%0A%20%20%20%20%20%20state%20join_state%20%3C%3Cjoin%3E%3E%0A%20%20%20%20%20%20State2%20--%3E%20join_state%0A%20%20%20%20%20%20State3%20--%3E%20join_state%0A%20%20%20%20%20%20join_state%20--%3E%20State4%0A%20%20%20%20%20%20State4%20--%3E%20%5B*%5D%0A"}),u,a(s,{id:"me99",graph:"%20%20%20%20stateDiagram-v2%0A%20%20%20%20%20%20%20%20State1%3A%20The%20state%20with%20a%20note%0A%20%20%20%20%20%20%20%20note%20right%20of%20State1%0A%20%20%20%20%20%20%20%20%20%20%20%20Important%20information!%20You%20can%20write%0A%20%20%20%20%20%20%20%20%20%20%20%20notes.%0A%20%20%20%20%20%20%20%20end%20note%0A%20%20%20%20%20%20%20%20State1%20--%3E%20State2%0A%20%20%20%20%20%20%20%20note%20left%20of%20State2%20%3A%20This%20is%20the%20note%20to%20the%20left.%0A"}),f,a(s,{id:"me106",graph:"stateDiagram-v2%0A%20%20%20%20%5B*%5D%20--%3E%20Active%0A%0A%20%20%20%20state%20Active%20%7B%0A%20%20%20%20%20%20%20%20%5B*%5D%20--%3E%20NumLockOff%0A%20%20%20%20%20%20%20%20NumLockOff%20--%3E%20NumLockOn%20%3A%20EvNumLockPressed%0A%20%20%20%20%20%20%20%20NumLockOn%20--%3E%20NumLockOff%20%3A%20EvNumLockPressed%0A%20%20%20%20%20%20%20%20--%0A%20%20%20%20%20%20%20%20%5B*%5D%20--%3E%20CapsLockOff%0A%20%20%20%20%20%20%20%20CapsLockOff%20--%3E%20CapsLockOn%20%3A%20EvCapsLockPressed%0A%20%20%20%20%20%20%20%20CapsLockOn%20--%3E%20CapsLockOff%20%3A%20EvCapsLockPressed%0A%20%20%20%20%20%20%20%20--%0A%20%20%20%20%20%20%20%20%5B*%5D%20--%3E%20ScrollLockOff%0A%20%20%20%20%20%20%20%20ScrollLockOff%20--%3E%20ScrollLockOn%20%3A%20EvScrollLockPressed%0A%20%20%20%20%20%20%20%20ScrollLockOn%20--%3E%20ScrollLockOff%20%3A%20EvScrollLockPressed%0A%20%20%20%20%7D%0A"}),S,a(s,{id:"me113",graph:"stateDiagram%0A%20%20%20%20direction%20LR%0A%20%20%20%20%5B*%5D%20--%3E%20A%0A%20%20%20%20A%20--%3E%20B%0A%20%20%20%20B%20--%3E%20C%0A%20%20%20%20state%20B%20%7B%0A%20%20%20%20%20%20direction%20LR%0A%20%20%20%20%20%20a%20--%3E%20b%0A%20%20%20%20%7D%0A%20%20%20%20B%20--%3E%20D%0A"}),T,a(s,{id:"me133",graph:"stateDiagram-v2%0A%20%20%20%20Yswsii%3A%20Your%20state%20with%20spaces%20in%20it%0A%20%20%20%20%5B*%5D%20--%3E%20Yswsii%0A"})])}const R=e(p,[["render",v]]);export{L as __pageData,R as default};
